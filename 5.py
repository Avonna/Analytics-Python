# -*- coding: utf-8 -*-
"""05_Scientific_computing_homework.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17OSxyVk_sX2HHBcsH9CcLIUkdykdeGvE

# Научные вычисления с NumPy и SciPy
"""

import numpy as np
import scipy as sp
from scipy.sparse import csr_matrix

"""### Задача 1: Вычисления по цепочке

Напишите функцию, которая возвращает значение следующей математической функции в зависимости от переменной х, где x - одномерный вектор.

$f(x) = \frac{1}{2}x^2 arctg(x) + 5cos(2x) + e^{x} + \log{6x}$

Проверьте работу функции на заданном векторе

P.S. косинус, арктангенс и т.д. доступны в библиотеке numpy: np.arctan() ...
"""

import numpy as np
x = np.array([3, 5, 8])

F = 0.5 * x**2 * np.arctan(x) + 5 * np.cos(2 * x) + np.exp(x) + np.log(6 * x)
print(F)

"""### Задача 2: Вычисления по цепочке

Напишите функцию, которая вычисляет значение следующей математической функции в зависимости от переменной х, где х - вектор

$F(x) = \frac{3}{4}AA^Tx + Bx + c$
"""

np.random.seed(42)

A = np.random.randint(low=1, high=5, size=(3,3))
B = np.random.randint(low=1, high=5, size=(3,3))
c = np.random.randint(low=1, high=5, size=(3))
c = np.random.randint(low=1, high=5, size=(3))

A

B

c

x

Fx = 0.75 * (A.dot(A.T).dot(x)) * B.dot(x) + c
print(Fx)

"""### Задача 3: 

Дана разреженная матрица, преобразуйте ее в csr формат, посчитайте долю разреженности, т.е. содержания нулей
"""

# фиксируем сид
np.random.seed(42)

A = np.eye(50)
A[5, :] = np.random.randint(low=0, high=2, size = (50))
A[31, :] = np.random.randint(low=0, high=2, size = (50))
A[:, 49] = np.random.randint(low=0, high=2, size = (50))

A

S = csr_matrix(A)
print(S)

sparsity = 1 - np.count_nonzero(A) / A.size
print(sparsity)

"""### Задача 4

Даны две разреженные матрицы, преобразуйте их в формат csr и посчитайте:

* сумму двух матриц
* матричное произведение двух матриц
* выведите на экран сумму и произведение, предварительно преобразовав их обратно в "плотный" формат (метод .todense)
"""

# фиксируем сид
np.random.seed(42)

A = np.eye(50)
A[2, :] = np.random.randint(low=0, high=2, size = (50))
A[37, :] = np.random.randint(low=0, high=2, size = (50))
A[:, 44] = np.random.randint(low=0, high=2, size = (50))

B = np.zeros((50,50))
A[2, :] = np.random.randint(low=0, high=2, size = (50))
A[37, :] = np.random.randint(low=0, high=2, size = (50))
A[:, 44] = np.random.randint(low=0, high=2, size = (50))

A

B

Sa = csr_matrix(A)
print(Sa)

Sb = csr_matrix(B)
print(Sb)

SUM = Sa + Sb
print(SUM)

Proiz = Sa.dot(Sb)
print(Proiz)

SUM.todense()

Proiz.todense()

"""## Задачи Pro

### Задача 5

Даны данные о кол-ве посетителей мобильного приложения за 3 месяца на ежедневной основе. С помощью матрицы Тоеплица посчитайте значения показателя Sticky Factor за весь период

$Sticky Factor = \frac{DAU}{MAU}$, где

* MAU - Monthly Active Users, кол-во посетителей за месяц, считается на ежедневной основе как сумма кол-ва посетителей за 30 дней (т.е. каждый день берется окно в 30 дней назад) - это нужно посчитать
* DAU - Daily Active Users, кол-во уникальных посетителей за день - эти данные нам уже даны

Нужно посчитать исторические значения Sticky Factor (SF) на ежедневной основе начиная с момента, как SF определен, т.е. начиная с 30го дня.
"""

from scipy import linalg

np.random.seed(42)

DAU = np.random.randint(low=0, high=2000, size = (30*3))

DAU

MAU = sp.linalg.toeplitz(DAU)
print(MAU)

SF = DAU / MAU
SF

SF.mean(axis = 1)[30:]

"""### Задача 6

Есть данные о продажах домов за период. Код для подгрузки данных приведен ниже. 

* Для подгруженных данных, сделайте SVD разложение
* Нарисуйте график динамики сингулярных значений (код приведен)
* Визуально определите наилучший порог отсечения k
* Используя этот порог, найдите матрицу меньшей размерности, которая будет наилучшим приближением к исходной.
"""

from google.colab import files

file = files.upload()

!ls

import pandas as pd
data = pd.read_csv('train.csv', index_col=0)

cols = ['MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea',\
               'BsmtFinSF1', 'BsmtUnfSF', '2ndFlrSF', 'GrLivArea', 'GarageYrBlt', 'GarageArea','SalePrice', 'YrSold']

data = data[cols]
data.dropna(inplace=True)
data = data.values

data.shape

data = data.dot(data.T)
np.sqrt(np.linalg.eigvals(data_))*np.eye(1121)

U, S, V =np.linalg.svd(data)

S

plt.figure(figsize=(10,8))
plt.title('Обычная шкала')
plt.plot(S)
plt.yscale('log')
plt.show()

plt.plot(U)
#plt.yscale('log')
plt.show()

plt.plot(U)
plt.yscale('log')
plt.show()

data_2 = (U[:, :2].dot(S[:2]*np.eye(2))).dot(V[:2, :2])

data_f = pd.DataFrame(data_2)
data_f.head()

sns.pairplot(data_f)
plt.show()

U_, S_, V_ =np.linalg.svd(data_f)
S_

plt.figure(figsize=(10,8))
plt.title('Обычная шкала')
plt.plot(S_)
plt.yscale('log')
plt.show()

plt.plot(U_)
#plt.yscale('log')
plt.show()

plt.plot(U_)
plt.yscale('log')
plt.show()