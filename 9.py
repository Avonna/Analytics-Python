# -*- coding: utf-8 -*-
"""09_Visualization_with_Seaborn_lection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F62RYqyMM51Lvo1Y6bAJlP54hded1Uvb

# Визуализация данных с Seaborn

<a href="https://seaborn.pydata.org/">seaborn</a> - библиотека для визуализации данных, красивые графики статистических зависимостей в одно движение
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""## 1. задаем фон всех будущих графиков в ноутбуке

sns.set_style: один из {darkgrid, whitegrid, dark, white}
"""

sns.set_style('darkgrid')

x = np.linspace(-5,5,100)
for el in ['darkgrid', 'whitegrid', 'dark', 'white']:
    sns.set_style(el)
    plt.plot(np.sin(x))
    plt.title(el)
    plt.show()

"""* регулируемые параметры:"""

sns.set_style?

sns.axes_style()

"""## 2. Визуализация парных взаимосвязей

sns.lmplot

подгрузим уже хорошо известный нам датасет - Ирисы:
"""

from sklearn import datasets
data = datasets.load_iris(return_X_y=False)
X = data.data
y = data.target
names = data.feature_names
target_names = data.target_names

names

target_names

import pandas as pd
import numpy as np
names.append('target')
df = pd.DataFrame(np.hstack([X, y.reshape(-1,1)]), columns=names)

df['target_names'] = 'setosa'

target_names[2]

df.loc[df.target==1, 'target_names'] = 'versicolor'
df.loc[df.target==2, 'target_names'] = 'virginica'

df.tail()

"""Рисуем график:"""

признак_1 = а + b * признак_0

logx=True

plt.figure(figsize=(10,10))
sns.lmplot(data=df.drop(['target'], axis=1), x='sepal length (cm)', y='sepal width (cm)')
plt.show()

sns.lmplot(data=df.drop(['target'], axis=1), x='sepal length (cm)', y='sepal width (cm)', hue='target_names')
plt.show()

sns.lmplot(data=df.drop(['target'], axis=1), x='sepal length (cm)', y='sepal width (cm)', logx=True, hue='target_names')
plt.show()

"""## 3. Визуализация распределений признаков

### 3.1 boxplot

sns.boxplot
"""

df.head()

df.describe()

df.quantile(0.99)

df[df['sepal width (cm)']>=4].shape

plt.figure(figsize=(4,6))
sns.boxplot(data=df.drop('target', axis=1), palette=sns.color_palette('Greens'))
plt.show()

sns.boxplot(data=df.drop('target', axis=1), x='sepal length (cm)', y='target_names', hue='target_names')

"""### 3.2 violinplot

sns.violiplot
"""

sns.violinplot?

plt.figure(figsize=(10,10))
sns.violinplot(data=df.drop('target', axis=1), x='sepal length (cm)', y='target_names', hue='target_names', palette=sns.color_palette('Blues'))

plt.figure(figsize=(10,10))
sns.violinplot(data=df.drop('target', axis=1), orient='h')
plt.show()

"""### 3.3 гистограмма распределения"""

plt.figure(figsize=(10,6))
sns.distplot(df.iloc[:,3], bins='auto')

sns.distplot?

"""## 4. heatmap матрицы корреляций (или любой матрицы расстояний)

sns.heatmap
"""

sns.heatmap?

sns.palplot(sns.diverging_palette(8, 240, sep=20, n=7))

sns.diverging_palette?

plt.figure(figsize=(7,6))
corr = df.drop('target_names', axis=1).corr()
sns.heatmap(corr, cmap=sns.color_palette("RdBu_r", 1000), vmin=-1, center=0, annot=True)

"""## 5. Диаграммы

sns.countplot
"""

sns.countplot(df.target_names)

"""## 6. Разделение по категориальному признаку

sns.factorplot
"""

sns.factorplot(data=df.drop('target', axis=1), kind='swarm', col='target_names')

"""## 7. Визуализация совмесных распределений

sns.jointplot
"""

sns.jointplot(data=df, x=df.iloc[:,0], y=df.iloc[:,1])

"""### pairplot"""

sns.pairplot(df.drop('target', axis=1), hue='target_names')