# -*- coding: utf-8 -*-
"""03_ДЗ.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19W4AtTW9S6ZF_bNFy1MxCiwgg41dBsbU

# Модули и классы

### Задача 1

Создайте класс **окружность** с атрибутом **радиус**. В классе должны быть следующие методы:
* расчет диаметра
* расчет длины окружности
* расчет площади 

Продемонстрируйте правильность работы кода
"""

#import math либо импортировать и обойтись без глобальных (pi). pfvtybnm pi на math.pi
# сигнатура класса
class circle:
    global pi
    pi = 3.14
    # конструктор класса
    def __init__(self, radius):
      self.radius = radius
    # метод рассчета диаметра окружности
    def diameter(self):
      return self.radius*2
    # метод для расчета длины окружности
    def length(self):
      return 2*self.radius*pi
    # метод для расчета площади
    def area(self):
        return pi*self.radius**2

r = circle(6)
print("Диаметр окружности",r.diameter())
print("Длина окружности",r.length())
print("Площадь окружности",r.area())

"""### Задача 2

Создайте класс **прямоугольник** с атрибутами **длина** и **ширина**. В классе должны быть следующие методы:
* расчет площади прямоугольника
* расчет диагонали прямоугольника
* расчет радиуса описанной вокруг прямоугольника окружности
* расчет площади описанной окружности
* расчет площади вписанной окружности
* расчет длины окружности вписанной окружности
* расчет длины окружности описанной окружности
"""

#import math либо импортировать и обойтись без глобальных (pi). pfvtybnm pi на math.pi
#сигнатура класса
class Rectangle:
  global pi
  pi = 3.14
  def __init__(self, length, width):
    if length > width:
      self.length = length
      self.width = width
    else:
      self.length = width
      self.width = length
    #рассчет площади прямоугольника
  def s(self):
    return self.length * self.width
    #расчет диагонали прямоугольника
  def diagonal(self):
    return (self.length**2 + self.width**2)**.5
    #расчет радиуса описанной вокруг прямоугольника окружности
  def radius_opis(self):
    return ((self.length**2 + self.width**2)**.5)/2
    #расчет площади описанной окружности
  def s_opis(self):
    return pi*((self.length**2 + self.width**2)**.5)/2
    #расчет площади вписанной окружности
  def s_vpis(self):
    return pi*(self.width/2)**2             #радиус равен половине (ширины) прямоугольника
    #расчет длины окружности вписанной окуржности
  def l_vpis(self):
    return 2*pi*self.width
    #расчет длины окружности описанной окружности
  def l_opis(self):
    return 2*pi*((self.length**2 + self.width**2)**.5)/2
pr = Rectangle(3, 4)   
print("Площадь прямоугольника равна ",pr.s())
print("Диагональ прямоугольника равна ",pr.diagonal())
print("Радиус описанной прямоугольника окружности равен", pr.radius_opis())
print("Площадь описанной окружности", pr.s_opis())
print("Площадь вписанной окружности", pr.s_vpis())
print("Длина вписанной окружности", pr.l_vpis())
print("Длина описанной окружности", pr.l_opis())

"""### Задача 3

Создайте класс **прямоугольный параллелепипед** с атрибутами длина основания, ширина основания, высота. Унаследуйте все, что можно унаследовать, у класса из предыдущей задачи (прямоугольник). Методы предыдущего класса будут относиться к основанию параллелепипеда. Кроме тех методов, что мы наследуем у предыдущего класса, добавьте:

* расчет объема параллелепипеда

Продемонстрируйте правильность работы кода
"""

class Rectangle:
  global pi
  pi = 3.14
  def __init__(self, length, width):
    if length > width:
      self.length = length
      self.width = width
    else:
      self.length = width
      self.width = length
    #рассчет площади прямоугольника
  def s(self):
    return self.length * self.width
    #расчет диагонали прямоугольника
  def diagonal(self):
    return (self.length**2 + self.width**2)**.5
    #расчет радиуса описанной вокруг прямоугольника окружности
  def radius_opis(self):
    return ((self.length**2 + self.width**2)**.5)/2
    #расчет площади описанной окружности
  def s_opis(self):
    return pi*((self.length**2 + self.width**2)**.5)/2
    #расчет площади вписанной окружности
  def s_vpis(self):
    return pi*(self.width/2)**2             #радиус равен половине (ширины) прямоугольника
    #расчет длины окружности вписанной окуржности
  def l_vpis(self):
    return 2*pi*self.width
    #расчет длины окружности описанной окружности
  def l_opis(self):
    return 2*pi*((self.length**2 + self.width**2)**.5)/2


class Pr_paral(Rectangle):
  global pi
  pi = 3.14
  def __init__(self, length, width, height):
      self.length = length
      self.width = width
      self.height = height
    #рассчет площади 
  def s(self):
    a = self.length * self.width
    b = self.length*self.height
    c = self.width*self.height
    return (a + b + c)*2
    #расчет диагонали
  def diagonal(self):
    return (self.length**2 + self.width**2 + self.height**2)**.5
  # расчет объема параллелепипеда
  def volume(self):
    return self.length*self.width*self.height
  
par = Pr_paral(3, 5, 7)  
print("Площадь равна ",par.s())
print("Диагональ равна ",par.diagonal())
print("Радиус описанной прямоугольника окружности равен", par.radius_opis())
print("Площадь описанной окружности", par.s_opis())
print("Площадь вписанной окружности", par.s_vpis())
print("Длина вписанной окружности", par.l_vpis())
print("Длина описанной окружности", par.l_opis()) 
print("Объем параллелепипеда", par.volume())

"""### Задача 4

Заверните классы из предыдущих задач в модуль **Геометрия**. Импортируйте модуль. Создайте несколько экземпляров классов. Продемонстрируйте правильность работы кода.
"""

from google.colab import files #нужно для загрузки файла с модулем

file = files.upload() #загрузка модуля Геометрия

!ls #проверка загрузился модуль или нет

import geometric
parall = geometric.Rectangle(2, 5) #прямоугольник

#прямоугольник 
print(parall.diagonal())
print(parall.diagonal())
print(parall.l_opis())
print(parall.s())

krug = geometric.circle(8) #окружность с атрибутом радиус

#окружность с атрибутом радиус
print(krug.area())
print(krug.diameter())
print(krug.length())

treug = geometric.Triangle(3, 4, 5) #треугольник

print(treug.area_tr())
print(treug.len_tr())
print(treug.rad_tr())

par_pri = geometric.Pr_paral(3, 4, 6)

print(par_pri.diagonal())
print(par_pri.volume())
print(par_pri.radius_opis())